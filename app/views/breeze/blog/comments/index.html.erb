<% content_for :title, "Blog comments" %>

<%= tabbed_layout do |tabs| %>
  <% tabs.published :title => "Published" do -%>
    <h2>Published comments</h2>
    <%= render "comments", :comments => blog.comments.published.paginate %>
  <% end -%>
  <% tabs.pending :title => "Pending" do -%>
    <h2>Pending comments</h2>
    <%= render "comments", :comments => blog.comments.pending.paginate %>
  <% end -%>
  <% tabs.spam :title => "Spam" do -%>
    <h2>Spam comments</h2>
    <%= render "comments", :comments => blog.comments.spam.paginate %>
  <% end -%>
<% end %>

<% content_for :left do %>
  <%= render :partial => "breeze/blog/blogs/left" %>
<% end %>

<script type="text/javascript" charset="utf-8">
  function makeDraggable(comments) {
    $(comments).draggable({
      appendTo: '#main',
      cursor: 'default',
      cursorAt: { left: -8, top: -8 },
      helper: function() {
        return $('<div class="comment-drag-helper">(Comment)</div>');
      },
      start: function(event, ui) {
        $(':checkbox', this).attr('checked', true);
        $(ui.helper).html($(this).closest('tbody').find(':checked').length);
      }
    });
  }

  $(function() {
    makeDraggable('.comments-container .comment');

    $('.comments-container tfoot .pagination a').live('click', function() {
      var container = $(this).closest('.container');
      var tab = $(this).closest('.tab-pane').attr('id').replace(/^tab_/, '');
      $.get(this.href + '&tab=' + tab, function(data) {
        container.replaceWith(data);
        makeDraggable('.comments-container:visible .comment');
      });
      return false;
    });
    
    $('#main-tabs-tabs li a').droppable({
      accept: '.comment',
      hoverClass: 'drop-hover',
      tolerance: 'pointer',
      drop: function(e, ui) {
        var comment_ids = [];
        var comments = $(ui.draggable).closest('table').find('tbody :checked').closest('.comment');
        comments.each(function() {
          comment_ids.push(this.id.replace(/^comment_/, 'comment_ids[]='));
        });
        comments.fadeOut(function() { $(this).remove(); });
        $.ajax({
          url: '/admin/blog/comments.js',
          type: 'post',
          dataType: 'script',
          data: '_method=put&' + comment_ids.join('&') + '&comment[status]=' + $(this).attr('href').replace(/^.*\#tab_/, '')
        });
      }
    });
    
    $('.comments-container thead :checkbox').live('change', function() {
      var comments = $('tbody :checkbox', $(this).closest('table'));
      if (this.checked) {
        comments.attr('checked', true);
      } else {
        comments.removeAttr('checked');
      }
    });
    
    $('.comments-container :checkbox').live('change', function() {
      var container = $(this).closest('.container');
      $('.with-selected', container).toggle($('tbody :checked', container).length > 0);
    });
    
    $('.comments-container .with-selected .button').live('click', function() {
      var comment_ids = [];
      var comments = $(this).closest('.container').find('tbody :checked').closest('.comment');
      comments.each(function() { comment_ids.push(this.id.replace(/^comment_/, 'comment_ids[]=')); });
      var method = $(this).is('.delete') ? 'delete' : 'put';
      var data = '_method=' + method + '&' + comment_ids.join('&');
      if ($(this).is('.approve')) { data += '&comment[status]=published'; }
      if ($(this).is('.spam')) { data += '&comment[status]=spam'; }
      $.ajax({
        url:'/admin/blog/comments.js',
        type:'post',
        dataType:'script',
        data: data
      });
      $(this).closest('.container').find('thead :checked').removeAttr('checked');
      $(this).closest('.with-selected').hide();
      return false;
    });
  });
</script>